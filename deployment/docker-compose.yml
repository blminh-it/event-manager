services:
  postgres:
    container_name: 'event-postgres'
    hostname: 'event-postgres'
    restart: 'unless-stopped'
    image: 'postgres:16-alpine'
    environment:
      - 'POSTGRES_USER=${EVENT_MANAGER_POSTGRES_USER_USERNAME}'
      - 'PGUSER=${EVENT_MANAGER_POSTGRES_USER_USERNAME}'
      - 'POSTGRES_PASSWORD=${EVENT_MANAGER_POSTGRES_USER_PASSWORD}'
      - 'PGDATA=/data/postgres'
    volumes:
      - '../data/postgres/data:/data/postgres'
      - '../data/postgres/postgres_init.sql:/docker-entrypoint-initdb.d/init.sql'
    ports:
      - '6432:5432'
    networks:
      - 'event_manager_network'

  # nginx:
  #   container_name: 'public-nginx'
  #   hostname: 'public-nginx'
  #   image: 'nginx:1.27.0'
  #   restart: 'unless-stopped'
  #   ports:
  #     - '80:80'
  #     - '443:443'
  #   volumes:
  #     - './nginx/nginx.conf:/etc/nginx/nginx.conf'
  #     - './nginx/conf.d:/etc/nginx/conf.d'
  #     - './nginx/certs:/etc/nginx/certs'
  #   networks:
  #     - 'event_manager_network'

  backend:
    container_name: 'event-backend'
    hostname: 'event-backend'
    restart: 'unless-stopped'
    image: '${EVENT_MANAGER_BACKEND_DOCKER_IMAGE}'
    # working_dir: '/home/node/app'
    # build:
    #   context: ../backend
    #   dockerfile: docker/Dockerfile
    # env_file:
    #   - '../backend/.env'
    volumes:
      - '../backend/.env:/home/node/app/.env'
      - '../backend/tsconfig.json:/home/node/app/tsconfig.json'
    ports:
      - '6000:3000'
    networks:
      - 'event_manager_network'
    # depends_on:
    #   - postgres

  frontend:
    container_name: 'event-frontend'
    hostname: 'event-frontend'
    restart: 'unless-stopped'
    image: '${EVENT_MANAGER_FRONTEND_DOCKER_IMAGE}'
    # build:
    #   context: ../frontend
    #   dockerfile: docker/Dockerfile
    # volumes:
    #   - '../frontend:/home/node/app'
    #   - /home/node/app/node_modules
    ports:
      - '6173:5173'
    networks:
      - 'event_manager_network'

networks:
  event_manager_network:
    name: 'event_manager_network'
